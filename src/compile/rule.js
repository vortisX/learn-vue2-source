/**
 * Vue模板编译正则表达式规则集合
 * 这个文件定义了用于解析HTML模板的各种正则表达式
 * 这些正则表达式是Vue模板编译器的基础，用于识别和提取HTML的各个组成部分
 */

/**
 * ncname - 不带命名空间的标签名匹配规则
 * 匹配符合XML命名规范的标签名，不包含命名空间前缀
 * 
 * 规则解释：
 * - [a-zA-Z_] : 必须以字母或下划线开头
 * - [\\-\\.0-9_a-zA-Z]* : 后面可以跟任意数量的字母、数字、下划线、连字符、点号
 * 
 * 匹配示例：
 * - ✅ div, span, input, my-component, _private, el.item
 * - ❌ 123div, -start, .hidden
 */
export const ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z]*";

/**
 * qnameCapture - 带命名空间的标签名捕获规则
 * 用于匹配可能包含命名空间的标签名，如SVG、XML标签
 * 
 * 规则解释：
 * - ((?:" + ncname + "\\:)?(" + ncname + "))
 * - 外层括号：捕获整个标签名（包括命名空间）
 * - (?:" + ncname + "\\:)? : 可选的命名空间前缀部分
 * - (" + ncname + ") : 捕获实际的标签名
 * 
 * 匹配示例：
 * - ✅ div, svg:circle, xml:node, custom:component
 * - 捕获组1：完整标签名 (svg:circle)
 * - 捕获组2：不带命名空间的标签名 (circle)
 */
export const qnameCapture = "((?:" + ncname + "\\:)?(" + ncname + "))";

/**
 * startTagOpen - 开始标签开头匹配规则
 * 匹配HTML开始标签的开头部分：< + 标签名
 * 
 * 规则解释：
 * - ^ : 从字符串开头开始匹配
 * - < : 匹配左尖括号
 * - qnameCapture : 匹配标签名部分
 * 
 * 匹配示例：
 * - ✅ <div, <span, <svg:circle
 * - ❌ div>, < div（有空格）
 */
export const startTagOpen = new RegExp("^<" + qnameCapture);

/**
 * endTag - 结束标签匹配规则
 * 匹配完整的HTML结束标签
 * 
 * 规则解释：
 * - ^ : 从字符串开头开始匹配
 * - <\\/ : 匹配 </ 开始
 * - qnameCapture : 匹配标签名
 * - [^>]* : 匹配任意非>字符（理论上结束标签不应该有属性，但这里容错处理）
 * - > : 匹配结束的右尖括号
 * 
 * 匹配示例：
 * - ✅ </div>, </span>, </svg:circle>
 * - ❌ <div>, </, </div extra>
 */
export const endTag = new RegExp(`^<\\/${qnameCapture}[^>]*>`)

/**
 * attribute - HTML属性匹配规则
 * 这是最复杂的正则表达式，用于匹配HTML标签的属性
 * 支持多种属性格式：有值属性、无值属性、不同的引号包围
 * 
 * 规则详细解释：
 * - ^\s* : 可选的前导空白字符
 * - ([^\s"'<>\/=]+) : 捕获组1 - 属性名，不包含空白、引号、尖括号、斜杠、等号
 * - (?:\s*(=)\s*...)? : 非捕获组，可选的 = 号和属性值部分
 * - (=) : 捕获组2 - 等号（用于判断是否有属性值）
 * - (?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)) : 属性值的三种格式
 *   - "([^"]*)" : 捕获组3 - 双引号包围的值
 *   - '([^']*)' : 捕获组4 - 单引号包围的值  
 *   - ([^\s"'=<>`]+) : 捕获组5 - 无引号的值
 * 
 * 匹配示例：
 * - ✅ id="app" -> [全匹配, "id", "=", "app", undefined, undefined]
 * - ✅ class='container' -> [全匹配, "class", "=", undefined, "container", undefined]
 * - ✅ disabled -> [全匹配, "disabled", undefined, undefined, undefined, undefined]
 * - ✅ value=123 -> [全匹配, "value", "=", undefined, undefined, "123"]
 */
export const attribute =
  /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;

/**
 * startTagClose - 开始标签结束匹配规则
 * 匹配开始标签的结束部分，支持自闭合标签
 * 
 * 规则解释：
 * - ^\s* : 可选的前导空白
 * - (\/?)> : 捕获可选的斜杠（自闭合标签）+ 右尖括号
 * 
 * 匹配示例：
 * - ✅ > -> [">", ""] (普通标签结束)
 * - ✅ /> -> ["/>", "/"] (自闭合标签)
 * - ✅   > -> [" >", ""] (有空格的结束)
 */
export const startTagClose = /^\s*(\/?)>/;

/**
 * defaultTagRE - 插值表达式匹配规则
 * 匹配Vue模板中的双大括号插值表达式 {{}}
 * 这是Vue模板语法的核心特性之一
 * 
 * 规则解释：
 * - \{\{ : 匹配开始的双大括号（需要转义）
 * - ((?:.|\r?\n)+?) : 捕获组1 - 非贪婪匹配插值内容
 *   - (?:.|\r?\n) : 匹配任意字符（包括换行符）
 *   - +? : 非贪婪匹配一次或多次
 * - \}\} : 匹配结束的双大括号
 * - g : 全局匹配标志，匹配所有出现的插值
 * 
 * 匹配示例：
 * - ✅ {{message}} -> 捕获 "message"
 * - ✅ {{user.name}} -> 捕获 "user.name"  
 * - ✅ {{count + 1}} -> 捕获 "count + 1"
 * - ✅ {{
 *        multiline
 *        expression
 *      }} -> 捕获多行表达式
 */
export const defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;

// ============== 正则表达式设计原理 ==============
//
// 1. 分层解析策略：
//    - 先识别标签结构（开始/结束标签）
//    - 再解析标签内容（属性、文本）
//    - 最后处理特殊语法（插值表达式）
//
// 2. 容错性考虑：
//    - 支持命名空间标签（SVG、XML）
//    - 支持多种属性值格式
//    - 允许标签间的空白字符
//
// 3. 性能优化：
//    - 使用 ^ 锚点减少不必要的匹配
//    - 合理使用捕获组和非捕获组
//    - 避免过度的回溯
//
// 4. Vue特性支持：
//    - 插值表达式的完整支持
//    - 自闭合标签的识别
//    - 动态属性的解析基础
//
// 5. 标准兼容性：
//    - 遵循HTML5规范
//    - 支持XML命名空间
//    - 处理各种边界情况
